{"version":3,"sources":["App.tsx","index.tsx"],"names":["App","useState","chips","setChips","inputWidth","setInputWidth","style","display","gap","width","flexWrap","map","chip","index","Chip","label","value","TextField","onInput","target","size","length","split","id","Math","floor","random","onKeyDown","key","removeChip","filter","_","chipsArray","console","table","inputProps","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8MA+DeA,MAtDf,WAAgB,IAAD,EACaC,mBAAkB,IAD/B,mBACNC,EADM,KACCC,EADD,OAEuBF,mBAAiB,GAFxC,mBAENG,EAFM,KAEMC,EAFN,KAqCb,OACE,sBAAKC,MAAO,CAAEC,QAAS,OAAQC,IAAK,EAAGC,MAAO,MAAOC,SAAU,QAA/D,UACGR,EAAMS,KAAI,SAACC,EAAaC,GAAd,OACT,cAACC,EAAA,EAAD,CAAMC,MAAOH,EAAKI,OAAYH,MAEhC,cAACI,EAAA,EAAD,CACAC,QAvCgB,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,OAIrB,GAHAd,GAAc,SAAAe,GAAI,OAAIA,EAAO,KACF,IAAxBD,EAAOH,MAAMK,QAAchB,EAAc,GAEE,MAA1Cc,EAAOH,MAAMG,EAAOH,MAAMK,OAAS,GAAY,CACjD,GAAmC,KAA/BF,EAAOH,MAAMM,MAAM,KAAK,GAE1B,YADAH,EAAOH,MAAQ,IAGjBb,EAAS,GAAD,mBAAKD,GAAL,CAAY,CAClBc,MAAOG,EAAOH,MAAMM,MAAM,KAAK,GAC/BC,GAAIJ,EAAOH,MAAMM,MAAM,KAAK,GAAKE,KAAKC,MAAsB,YAAhBD,KAAKE,cAEnDP,EAAOH,MAAQ,GACfX,EAAc,KA0BdsB,UAtBkB,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,IAAKT,EAAkB,EAAlBA,OAE5B,GAAW,cAARS,GAAuBT,EAAOH,MAAMK,OAAS,EAC9ChB,GAAc,SAAAe,GAAI,OAAIA,EAAO,UAI/B,GAAY,cAARQ,EAAqB,CACvB,IAAMC,EAAa3B,EAAM4B,QAAO,SAAClB,EAAMmB,EAAGC,GAAV,OAAyBpB,EAAKW,KAAOS,EAAWA,EAAWX,OAAS,GAAGE,MACvGU,QAAQC,MAAMhC,GACdC,EAAS0B,KAaTM,WAAY,CACV7B,MAAO,CACLG,MAAM,GAAD,OAAKL,EAAL,cCpDfgC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.a581aea2.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { Chip } from \"@material-ui/core\";\n\ninterface IChip {\n  value: string;\n  id: string;\n}\n\nfunction App() {\n  const [chips, setChips] = useState<IChip[]>([] as IChip[]);\n  const [inputWidth, setInputWidth] = useState<number>(2);\n\n  const handleInput = ({ target }: any )=> {\n    setInputWidth(size => size + 1);\n    if(target.value.length === 0) setInputWidth(2);\n\n    if (target.value[target.value.length - 1] === \",\") {\n      if (target.value.split(\",\")[0] === \"\") {\n        target.value = \"\";\n        return;\n      }\n      setChips([...chips, {\n        value: target.value.split(\",\")[0],\n        id: target.value.split(\",\")[0] + Math.floor(Math.random() * 10210201021)\n      }]);\n      target.value = \"\";\n      setInputWidth(2);\n    }\n  };\n\n  const handleKeyDown = ({ key, target }: any) => {\n\n    if(key === 'Backspace' && target.value.length > 0) {\n      setInputWidth(size => size - 1);\n      return ;\n    }\n\n    if (key === \"Backspace\") {\n      const removeChip = chips.filter((chip, _, chipsArray) => chip.id !== chipsArray[chipsArray.length - 1].id);\n      console.table(chips)\n      setChips(removeChip);\n    }\n\n  };\n\n  return (\n    <div style={{ display: \"flex\", gap: 5, width: '30%', flexWrap: 'wrap'}}>\n      {chips.map((chip: IChip, index) => (\n        <Chip label={chip.value} key={index} />\n      ))}\n      <TextField \n      onInput={handleInput} \n      onKeyDown={handleKeyDown} \n      inputProps={{\n        style: {\n          width: `${inputWidth}ch`\n        }\n      }}/>\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}